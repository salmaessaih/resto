const Reservation = require('../models/Reservation');
const Table = require('../models/Table'); // Assurez-vous que le mod√®le Table est bien d√©fini

// üîπ Cr√©er une nouvelle r√©servation avec v√©rification des tables disponibles
exports.createReservation = (req, res) => {
    const {
        user_id, restaurant_id, reservation_date, reservation_heure, nombre_personne, eventType,
        additionalNotes, birthdayPerson, addCake, specialDecoration, surprise,
        eventDetails, equipment, specialTable, menuType, musicPreference, status
    } = req.body;

    if (!user_id || !restaurant_id || !reservation_date || !reservation_heure || !nombre_personne || !eventType) {
        return res.status(400).json({ message: "‚ùå Tous les champs obligatoires doivent √™tre remplis." });
    }

    console.log("üîç Recherche d'une table disponible...");

    // V√©rifier la disponibilit√© d'une table
    Table.findAvailableTable(restaurant_id, nombre_personne, (err, availableTable) => {
        if (err) {
            console.error("‚ùå Erreur SQL lors de la recherche de table :", err);
            return res.status(500).json({ message: "‚ùå Erreur serveur lors de la recherche de table." });
        }
        if (!availableTable) {
            return res.status(400).json({ message: "‚ùå Aucune table disponible pour cette r√©servation." });
        }

        console.log(`‚úÖ Table disponible trouv√©e: ${availableTable.id}`);

        const reservationData = {
            user_id, restaurant_id, table_id: availableTable.id, reservation_date, reservation_heure,
            nombre_personne, eventType, additionalNotes, birthdayPerson, addCake, specialDecoration,
            surprise, eventDetails, equipment, specialTable, menuType, musicPreference,
            status: status || "reserved"
        };

        // Cr√©er la r√©servation
        Reservation.create(reservationData, (err, result) => {
            if (err) {
                console.error("‚ùå Erreur SQL lors de la cr√©ation de la r√©servation :", err);
                return res.status(500).json({ message: "‚ùå Erreur serveur lors de la r√©servation." });
            }

            console.log(`‚úÖ R√©servation cr√©√©e avec ID: ${result.insertId}`);

            // Mettre √† jour le statut de la table comme "reserved"
            Table.updateTableStatus(availableTable.id, "reserved", (err) => {
                if (err) {
                    console.error("‚ö†Ô∏è Erreur lors de la mise √† jour du statut de la table :", err);
                } else {
                    console.log(`‚úÖ Table ${availableTable.id} marqu√©e comme r√©serv√©e.`);
                }
            });

            res.status(201).json({ message: "‚úÖ R√©servation cr√©√©e avec succ√®s", reservationId: result.insertId });
        });
    });
};


// üîπ R√©cup√©rer toutes les r√©servations
exports.getAllReservations = (req, res) => {
    Reservation.getAll((err, reservations) => {
        if (err) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©servations :", err);
            return res.status(500).json({ message: "‚ùå Erreur serveur" });
        }
        res.json(reservations);
    });
};


// üîπ R√©cup√©rer une r√©servation par ID
exports.getReservationById = (req, res) => {
    const { id } = req.params;

    Reservation.getById(id, (err, reservation) => {
        if (err) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration de la r√©servation :", err);
            return res.status(500).json({ message: "‚ùå Erreur serveur" });
        }
        if (!reservation) {
            return res.status(404).json({ message: "‚ùå R√©servation non trouv√©e" });
        }
        res.json(reservation);
    });
};



// üîπ Mettre √† jour une r√©servation
exports.updateReservation = (req, res) => {
    const { id } = req.params;
    const {
        reservation_date, reservation_heure, nombre_personne, eventType,
        additionalNotes, birthdayPerson, addCake, specialDecoration, surprise,
        eventDetails, equipment, specialTable, menuType, musicPreference, status
    } = req.body;

    if (!reservation_date || !reservation_heure || !nombre_personne || !eventType) {
        return res.status(400).json({ message: "‚ùå Tous les champs obligatoires doivent √™tre remplis." });
    }

    const updatedData = {
        reservation_date, reservation_heure, nombre_personne, eventType,
        additionalNotes, birthdayPerson, addCake, specialDecoration, surprise,
        eventDetails, equipment, specialTable, menuType, musicPreference, status
    };

    Reservation.update(id, updatedData, (err, result) => {
        if (err) {
            console.error("‚ùå Erreur lors de la mise √† jour de la r√©servation :", err);
            return res.status(500).json({ message: "‚ùå Erreur serveur" });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "‚ùå R√©servation non trouv√©e" });
        }
        res.json({ message: "‚úÖ R√©servation mise √† jour avec succ√®s" });
    });
};

// üîπ Supprimer une r√©servation
exports.deleteReservation = (req, res) => {
    const { id } = req.params;

    // R√©cup√©rer la r√©servation pour lib√©rer la table associ√©e
    Reservation.getById(id, (err, reservation) => {
        if (err) {
            console.error("‚ùå Erreur lors de la r√©cup√©ration de la r√©servation :", err);
            return res.status(500).json({ message: "‚ùå Erreur serveur" });
        }
        if (!reservation) {
            return res.status(404).json({ message: "‚ùå R√©servation non trouv√©e" });
        }

        // Supprimer la r√©servation
        Reservation.delete(id, (err, result) => {
            if (err) {
                console.error("‚ùå Erreur lors de la suppression de la r√©servation :", err);
                return res.status(500).json({ message: "‚ùå Erreur serveur" });
            }
            if (result.affectedRows === 0) {
                return res.status(404).json({ message: "‚ùå R√©servation non trouv√©e" });
            }

            // Lib√©rer la table associ√©e
            Table.updateTableStatus(reservation.table_id, "available", (err) => {
                if (err) {
                    console.error("‚ö†Ô∏è Erreur lors de la lib√©ration de la table :", err);
                } else {
                    console.log(`‚úÖ Table ${reservation.table_id} lib√©r√©e.`);
                }
            });

            res.json({ message: "‚úÖ R√©servation supprim√©e avec succ√®s et table lib√©r√©e" });
        });
    });
};