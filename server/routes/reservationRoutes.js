const express = require('express');
const router = express.Router();
const reservationController = require('../controllers/reservationController');
const auth = require('../middleware/auth'); // Middleware d'authentification
const isAdmin = require('../middleware/isAdmin'); // Middleware pour vÃ©rifier si l'utilisateur est admin

// ğŸ”¹ CrÃ©er une rÃ©servation (Accessible aux utilisateurs authentifiÃ©s)
router.post('/', auth, reservationController.createReservation);

// ğŸ”¹ RÃ©cupÃ©rer toutes les rÃ©servations (ADMIN uniquement)
router.get('/', auth, isAdmin, reservationController.getAllReservations);

// ğŸ”¹ RÃ©cupÃ©rer une rÃ©servation par ID (Accessible uniquement par l'utilisateur qui l'a crÃ©Ã©e ou un ADMIN)
router.get('/:id', auth, reservationController.getReservationById);

// ğŸ”¹ Mettre Ã  jour une rÃ©servation (Seul l'utilisateur ayant fait la rÃ©servation peut la modifier)
router.put('/:id', auth, reservationController.updateReservation);

// ğŸ”¹ Supprimer une rÃ©servation (ADMIN uniquement)
router.delete('/:id', auth, isAdmin, reservationController.deleteReservation);

module.exports = router;